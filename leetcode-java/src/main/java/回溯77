题目：
给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。
你可以按 任何顺序 返回答案。

/*
思路分析
定义结果变量:

result 是一个列表，用于存储所有找到的组合。
path 是一个列表，用于存储当前的组合路径。
回溯函数 backTrack:

参数：
now：当前要处理的数字。
k：组合的大小。
n：数字的最大值。
终止条件：
如果当前路径的长度已经达到了 k，说明找到一个组合，将其加入结果列表，并返回。
循环：
从当前数字 now 开始，遍历到 n。
剪枝：在循环内部，先进行剪枝判断，如果当前路径长度加上剩余元素数量不足以组成 k 个元素，直接返回，避免无效递归。
路径更新：将当前数字加入路径，然后递归调用 backTrack 处理下一个数字，确保每个数字只能使用一次。
回溯：递归返回后，将最后加入路径的数字移除，恢复路径状态。

关键点
回溯法：使用递归的方法尝试所有可能的组合。
剪枝优化：在递归前通过剪枝减少无效递归，提高算法效率。
路径管理：通过路径变量 path 管理当前选择的数字，并在递归过程中动态更新和回溯。
*/

class Solution {
    // 结果列表，用于存储所有的组合
    List<List<Integer>> result = new ArrayList<>();
    // 当前路径，用于存储当前组合
    List<Integer> path = new ArrayList<>();

    // 回溯函数
    void backTrack(int now, int k, int n) {
        // 如果当前路径的长度已经达到 k，说明找到一个组合
        if (path.size() >= k) {
            result.add(new ArrayList<>(path)); // 将当前组合加入结果列表
            return; // 结束当前递归
        }

        // 从当前数字 now 开始，遍历到 n
        for (int i = now; i <= n; i++) {
            // 剪枝：如果剩下的元素数量不足以填满 k 个元素，直接返回
            if (path.size() + (n - i + 1) < k) {
                return;
            }
            // 将当前数字加入路径
            path.add(i);
            // 递归调用，继续选择下一个数字，i+1 确保不重复使用同一个数字
            backTrack(i + 1, k, n);
            // 回溯，将最后加入路径的数字移除
            path.remove(path.size() - 1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        // 从数字 1 开始进行回溯
        backTrack(1, k, n);
        // 返回所有找到的组合
        return result;
    }
}
